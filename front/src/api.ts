import "@expo/browser-polyfill";
import { Color, type Clue, type Proof } from "./types";
import { groth16, type Groth16Proof } from "snarkjs";

const ADDRESS = "http://localhost:4000";

const vk = {
  protocol: "groth16",
  curve: "bn128",
  nPublic: 11,
  vk_alpha_1: [
    "13416655068219469806639773142239242329301982460283333605727277606266405353340",
    "6091803170507194460511889235530971370291337209657206291917246887480840977120",
    "1",
  ],
  vk_beta_2: [
    [
      "954753263732291742532922508499078512477000264839971543432509608002369213412",
      "19881658013573150219831545559885920234565981507491930681072911839750069612238",
    ],
    [
      "15276922294527558063340401716474336850175639494385160825499133742225290154659",
      "6920083021723437788014240616152772546288032164593122281948167282141340403269",
    ],
    ["1", "0"],
  ],
  vk_gamma_2: [
    [
      "10857046999023057135944570762232829481370756359578518086990519993285655852781",
      "11559732032986387107991004021392285783925812861821192530917403151452391805634",
    ],
    [
      "8495653923123431417604973247489272438418190587263600148770280649306958101930",
      "4082367875863433681332203403145435568316851327593401208105741076214120093531",
    ],
    ["1", "0"],
  ],
  vk_delta_2: [
    [
      "13720153902875469101060424605587177145076137475651099642060187520322343406282",
      "16589065736100928877795195843373818975730240309176293163832276792141631799715",
    ],
    [
      "6688134168013934820480095052267073894174109802481221457102905366933075298183",
      "12810196991242719912157422478609158962022574405262338896955479607733361590815",
    ],
    ["1", "0"],
  ],
  vk_alphabeta_12: [
    [
      [
        "9253459305744788021298428678389294596786199997211940654658276219617709299802",
        "5077519445934729688742913213132054020487615001597029382070630945864833303324",
      ],
      [
        "325504536379506851218190713182815332114282812146840534078530861410763742402",
        "13448773319493080244320313673751794098500193211421714168092962245346699497897",
      ],
      [
        "6649600090018206765508503894007059360539647688281153372234018808196055870566",
        "13017294679826689151247119227102484891268453491218776096486951252893221513918",
      ],
    ],
    [
      [
        "8843292006321888793261488770029975279890302738889923065938913506956358617033",
        "2259367845483031320096924960748715530177925514393617829199806638150807995579",
      ],
      [
        "4444286100893910709259983148845614443294561767045954399405243037979465375177",
        "11566505593866302351989411802606312967800089060599373835486861992539546572251",
      ],
      [
        "14082081596191272621022713996628173435054668968917115850909800359958919472388",
        "8122512247663294458363277131221214296093411368059295122085396847104273654396",
      ],
    ],
  ],
  IC: [
    [
      "21052198316255651524734185471674960162838492616243304841485195509759246452696",
      "3300817945212257307182385358207935813166557570858494434062259295727111590733",
      "1",
    ],
    [
      "218718869850912874600752728035473993413013962027196824173892806836852249208",
      "13276912329962585107489930167341237498294141231276155887062550446510747597811",
      "1",
    ],
    [
      "6793517197508426379497074343921474692676831952206343857795070697805190727744",
      "14773724642970078222434015035237402209635482950185776893822968031114557167842",
      "1",
    ],
    [
      "1298906689808395711062819313338337859344629202048585842908101824236375723389",
      "16392675963332238659933582053159279649130908452458142831417538031652498208589",
      "1",
    ],
    [
      "10900871991299580659907892418980150299686987675361256802858666137368217000125",
      "15191545848907310757545391605034801734461916218606751813928922362162493130378",
      "1",
    ],
    [
      "13914560498045424601961732461278043499822176712861454575252407364944479881026",
      "13787781398818346178854103572495758016399737883912283702678491176854153879623",
      "1",
    ],
    [
      "17399247739884104911444046564387995212178869383768073958201057487407175702842",
      "11584975559437630090872583108452931201560444221351228801021664612943839137958",
      "1",
    ],
    [
      "6024164875806018499723029319355387959289336717535507529080687424145694522657",
      "6457980234227266137589104968939012087493124556841682535887782420397031401695",
      "1",
    ],
    [
      "10102746873162655876180420545377799895167855408103907396013642647940203636939",
      "10387010445302716809063004590705316210105136555154228305549485789613873931070",
      "1",
    ],
    [
      "3705837189606350029411076195381951310266374873903808866970581328794173385724",
      "4718530326030952394873427178850892168140416636210422625668561332329234753338",
      "1",
    ],
    [
      "2604604958917173064260283243032521999750065974146165454495194348220530171079",
      "9978769851966940067533511818874485217826433820551412391056892410495562500181",
      "1",
    ],
    [
      "15259846827514242849736421676923875263512219331017483157293797373135047509802",
      "753962691735174393582195261050044506792797721707003358796856581528118066855",
      "1",
    ],
  ],
};

type BBProof = {
  a: string;
  b: string;
  c: string;
};

type ClueResponse = {
  colors: number[];
  proof: BBProof;
};

export async function getClue(guess: string): Promise<Clue> {
  const res = await fetch(`${ADDRESS}/guess/${guess.toLowerCase()}`);
  const { colors, proof } = (await res.json()) as ClueResponse;

  const sanitizedProof = {
    a: proof.a.split("(")[1].split(")")[0].split(", "),
    b: proof.b
      .split("(")[2]
      .split(" *")[0]
      .split(" + ")
      .concat(proof.b.split("(")[3].split(" *")[0].split(" + ")),
    c: proof.c.split("(")[1].split(")")[0].split(", "),
  };

  console.log(sanitizedProof);
  return {
    clue: colors,
    colors: colors.map((x) =>
      x === 2 ? Color.GREEN : x === 1 ? Color.YELLOW : Color.DARK_GREY
    ),
    proof: sanitizedProof,
  };
}

function getGroth16Proof(proof: Proof): Groth16Proof {
  return {
    pi_a: proof.a,
    pi_b: [
      [proof.b[0], proof.b[1]],
      [proof.b[2], proof.b[3]],
    ],
    pi_c: proof.c,
    curve: "bn128",
    protocol: "groth16",
  };
}

export async function verifyClue(
  guess: string,
  clue: Clue,
  commitment: string
): Promise<boolean> {
  const signals = [
    ...clue.clue.map((x) => x.toString()),
    (guess.charCodeAt(0) - 65).toString(),
    (guess.charCodeAt(1) - 65).toString(),
    (guess.charCodeAt(2) - 65).toString(),
    (guess.charCodeAt(3) - 65).toString(),
    (guess.charCodeAt(4) - 65).toString(),
    commitment,
  ];

  console.log(signals);

  return await groth16.verify(
    vk,
    signals,
    getGroth16Proof(clue.proof),
    console
  );
}

type WordResponse = {
  commitment: string;
};

export async function getCommitment(): Promise<string> {
  const res = await fetch(`${ADDRESS}/start`);
  const { commitment } = (await res.json()) as WordResponse;
  return commitment;
}
